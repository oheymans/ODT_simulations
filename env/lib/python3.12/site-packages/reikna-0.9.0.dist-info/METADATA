Metadata-Version: 2.4
Name: reikna
Version: 0.9.0
Summary: GPGPU algorithms for PyCUDA and PyOpenCL
Home-page: http://github.com/fjarri/reikna
Author: Bogdan Opanchuk
Author-email: bogdan@opanchuk.net
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: OS Independent
Requires: mako(>= 1.0.0)
Requires: numpy(>= 2.0.0)
Requires: funcsigs(>= 1.0.0)
Provides: reikna
License-File: LICENSE.txt
Requires-Dist: mako>=1.0.0
Requires-Dist: numpy>=2.0.0
Requires-Dist: funcsigs>=1.0.0
Provides-Extra: pyopencl
Requires-Dist: pyopencl>=2024; extra == "pyopencl"
Provides-Extra: pycuda
Requires-Dist: pycuda>=2024; extra == "pycuda"
Provides-Extra: dev
Requires-Dist: pytest>=5; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: scipy; extra == "dev"
Requires-Dist: sphinx>=1.2; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: license-file
Dynamic: provides
Dynamic: provides-extra
Dynamic: requires
Dynamic: requires-dist
Dynamic: summary

=====================================
Reikna, the pure Python GPGPU library
=====================================

``Reikna`` is a library containing various GPU algorithms built on top of `PyCUDA <http://documen.tician.de/pycuda>`_ and `PyOpenCL <http://documen.tician.de/pyopencl>`_.
The main design goals are:

* separation of computation cores (matrix multiplication, random numbers generation etc) from simple transformations on their input and output values (scaling, typecast etc);
* separation of the preparation and execution stage, maximizing the performance of the execution stage at the expense of the preparation stage (in other words, aiming at large simulations)
* partial abstraction from CUDA/OpenCL

Tests can be run by installing `Py.Test <http://pytest.org>`_ and running ``py.test`` from the ``test`` folder (run ``py.test --help`` to get the list of options).

For more information proceed to the `project documentation page <http://reikna.publicfields.net>`_. If you have a general question that does not qualify as an issue, you can ask it at the `discussion forum <https://groups.google.com/d/forum/reikna>`_.

